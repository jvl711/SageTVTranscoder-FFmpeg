def getBranch()
{
    if(env.GIT_BRANCH.split("/").length > 1)
    {
        return env.GIT_BRANCH.split("/")[1];
    }
    else
    {
        return env.GIT_BRANCH;
    }
}


pipeline
{
    agent
    {
        dockerfile
        {
            dir 'pipeline'
        }
    }

	environment
    {
        appName = 'SageTV Transcoder'

        GIT_HUB_USER = credentials('GitHubUser')
        GIT_HUB_TOKEN = credentials('GitHubToken')

        version = sh (script: "./build.sh version", returnStdout: true).trim()
    }

	stages
	{    


		stage('Set build informaction')
        {
            steps
            {
                script
                {
                    currentBuild.displayName = "${version}"
                    currentBuild.description += "<B>Version:</B> ${version}<BR>\n"                }
				}
            }
        }

		stage('Build Windows x32')
		{
		    steps
		    {
		        script
		        {
					sh "./build.sh clean"
		            sh "./build.sh buildall Winx32"

		            archiveArtifacts artifacts: "output/Winx32/SageTVTranscoderWinx32_${version}.zip", onlyIfSuccessful: true
		        }
		    }
		}

		stage('Build Windows x64')
		{
		    steps
		    {
		        script
		        {
					sh "./build.sh clean"
		            sh "./build.sh buildall Winx64"

		            archiveArtifacts artifacts: "output/Winx64/SageTVTranscoderWinx64_${version}.zip", onlyIfSuccessful: true
		        }
		    }
		}

		stage('Build Linux')
		{
		    steps
		    {
		        script
		        {
					sh "./build.sh clean"
		            sh "./build.sh buildall Linux"

					archiveArtifacts artifacts: "output/Linux/SageTVTranscoderLinux_${version}.zip", onlyIfSuccessful: true
		        }
		    }
		}
    }
}
