def getBranch()
{
    if(env.GIT_BRANCH.split("/").length > 1)
    {
        return env.GIT_BRANCH.split("/")[1];
    }
    else
    {
        return env.GIT_BRANCH;
    }
}


pipeline
{
    agent
    {
        dockerfile
        {
            dir 'pipeline'
        }
    }

    environment
    {
        appName = 'SageTV Transcoder'

        GIT_HUB_USER = credentials('GitHubUser')
        GIT_HUB_TOKEN = credentials('GitHubToken')

        version = sh (script: "./build.sh version", returnStdout: true).trim()
        libx265_version = sh (script: "./build.sh libx265_version", returnStdout: true).trim()
        libx264_version = sh (script: "./build.sh libx264_version", returnStdout: true).trim()
        nvenc_version = sh (script: "./build.sh nvenc_version", returnStdout: true).trim()
    }

    stages
    {    

        stage('Set build informaction')
        {
            steps
            {
                script
                {
                    currentBuild.displayName = "${version}"
                    currentBuild.description = "<B>Version:</B> ${version}<BR>\n"
                    currentBuild.description += "<B>Libx265 Version:</B> ${libx265_version}<BR>\n"
                    currentBuild.description += "<B>Libx264 Version:</B> ${libx264_version}<BR>\n"
                    currentBuild.description += "<B>NVENC Version:</B> ${nvenc_version}<BR>\n"
                }
            }
        }
		
		/*
        stage('Build Windows x32')
        {
            steps
            {
                script
                {
                    sh "./build.sh clean"
                    sh "./build.sh buildall Winx32"

                    archiveArtifacts artifacts: "output/Winx32/SageTVTranscoderWinx32_v${version}.zip", onlyIfSuccessful: true
                }
            }
        }
		*/

		
        stage('Build Windows x64')
        {
            steps
            {
                script
                {
                    sh "./build.sh clean"
                    sh "./build.sh buildall Winx64"

                    archiveArtifacts artifacts: "output/Winx64/SageTVTranscoderWinx64_v${version}.zip", onlyIfSuccessful: true
                }
            }
        }
		

        stage('Build Linux')
        {
            steps
            {
                script
                {
                    sh "./build.sh clean"
                    sh "./build.sh buildall Linux"

                    archiveArtifacts artifacts: "output/Linux/SageTVTranscoderLinux_v${version}.zip", onlyIfSuccessful: true
                }
            }
        }

		stage('Publish local')
    	{	
			steps
			{
				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}", remoteDirectorySDF: false, removePrefix: "output", sourceFiles: "output/Winx32/*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/Winx32", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasechangelist"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/Winx32", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasename"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])

				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}", remoteDirectorySDF: false, removePrefix: "output", sourceFiles: "output/Winx64/*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/Winx64", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasechangelist"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/Winx64", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasename"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
				
				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}", remoteDirectorySDF: false, removePrefix: "output", sourceFiles: "output/Linux/*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/Linux", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasechangelist"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
				cifsPublisher(publishers: [[configName: 'SageTVTranscoder', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/Linux", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasename"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
			}
    	}
		
		stage('Publish to GitHub')
        {
            when { expression { releaseToGit == true }}
            steps
            {
                script
                {                    
                    sh('git remote set-url origin https://${GIT_HUB_TOKEN}@github.com/jvl711/SageTVTranscoder-FFmpeg.git')
                    sh('git config --global user.email "josh@joshandmonique.com"')
                    sh('git config --global user.name "Joshua Lewis"')

                    //Delete the tag remote an local incase it already exists
                    sh("git tag -d v${version} || exit 0")
                    sh("git push --delete origin v${version} || exit 0")

                    sh("git tag v${version}")
                    sh("git push origin v${version}")

                    try
                    {
                        CHANGELOG = readFile(file: 'pipeline/releasechangelist')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasechangelist file: ${err.localizedMessage}"
                        CHANGELOG = ''
                    }

                    try
                    {
                        RELEASENAME = readFile(file: 'pipeline/releasename')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasename file: ${err.localizedMessage}"
                        RELEASENAME = ''
                    }

                    sh("github-release delete --user jvl711 --repo \"SageTVTranscoder-FFmpeg\" --tag v${version} -s ${GIT_HUB_TOKEN} || exit 0")
                    sh("github-release release -s ${GIT_HUB_TOKEN} --user jvl711 --repo \"SageTVTranscoder-FFmpeg\" --tag \"v${version}\" --name \"${RELEASENAME}\" --description \"${CHANGELOG}\"")
                    sh("sleep 5s")
                    //Add apk to the release
                    sh("github-release upload -s ${GIT_HUB_TOKEN} --user jvl711 --repo \"SageTVTranscoder-FFmpeg\" --tag \"v${version}\" --file \"output/Winx32/SageTVTranscoderWinx32_v${version}.zip\"")
                    sh("github-release upload -s ${GIT_HUB_TOKEN} --user jvl711 --repo \"SageTVTranscoder-FFmpeg\" --tag \"v${version}\" --file \"output/Winx32/SageTVTranscoderWinx64_v${version}.zip\"")
                    sh("github-release upload -s ${GIT_HUB_TOKEN} --user jvl711 --repo \"SageTVTranscoder-FFmpeg\" --tag \"v${version}\" --file \"output/Winx32/SageTVTranscoderLinux_v${version}.zip\"")
                }
            }
        }

    }
}
