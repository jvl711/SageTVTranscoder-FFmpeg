def getBranch()
{
    if(env.GIT_BRANCH.split("/").length > 1)
    {
        return env.GIT_BRANCH.split("/")[1];
    }
    else
    {
        return env.GIT_BRANCH;
    }
}


pipeline
{
    agent
    {
        dockerfile
        {
            dir 'pipeline'
        }
    }

	environment
    {
        appName = 'SageTV Transcoder'

        GIT_HUB_USER = credentials('GitHubUser')
        GIT_HUB_TOKEN = credentials('GitHubToken')

        version = sh (script: "./build.sh version", returnStdout: true).trim()
    }

	stages
	{    


		stage('Set build informaction')
        {
            steps
            {
                script
                {
                    currentBuild.displayName = "${version}"
                    currentBuild.description += "<B>Version:</B> ${version}<BR>\n"                }
				}
            }
        }

		stage('Build Windows x32')
		{
		    steps
		    {
		        script
		        {
					sh "./build.sh clean"
		            sh "./build.sh buildall Winx32"

		            archiveArtifacts artifacts: "output/Winx32/SageTVTranscoderWinx32_${version}.zip", onlyIfSuccessful: true
		        }
		    }
		}

		stage('Build Windows x64')
		{
		    steps
		    {
		        script
		        {
					sh "./build.sh clean"
		            sh "./build.sh buildall Winx64"

		            archiveArtifacts artifacts: "output/Winx64/SageTVTranscoderWinx64_${version}.zip", onlyIfSuccessful: true
		        }
		    }
		}

		stage('Build Linux')
		{
		    steps
		    {
		        script
		        {
					sh "./build.sh clean"
		            sh "./build.sh buildall Linux"

					archiveArtifacts artifacts: "output/Linux/SageTVTranscoderLinux_${version}.zip", onlyIfSuccessful: true
		        }
		    }
		}

		/*
        stage('Publish local')
        {
             steps
             {
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "android-tv/build/outputs/bundle/${VARIANT}", sourceFiles: "android-tv/build/outputs/bundle/${VARIANT}/*.aab"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasechangelist*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasename*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])

                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "android-tv/build/outputs/apk/${VARIANT}", sourceFiles: "android-tv/build/outputs/apk/${VARIANT}/*.apk"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasechangelist*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasename*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
             }
        }
		*/

		/*
        stage('Publish to GitHub')
        {
            when { expression { return getReleaseToGit() } }
            steps
            {
                script
                {
                    BRANCH = getBranch()

                    sh('git remote set-url origin https://${GIT_HUB_TOKEN}@github.com/OpenSageTV/sagetv-miniclient.git')
                    sh('git config --global user.email "josh@joshandmonique.com"')
                    sh('git config --global user.name "Joshua Lewis"')

                    //Delete the tag remote an local incase it already exists
                    sh("git tag -d v${version} || exit 0")
                    sh("git push --delete origin v${version} || exit 0")

                    sh("git tag v${version}")
                    sh("git push origin v${version}")

                    try
                    {
                        CHANGELOG = readFile(file: 'pipeline/releasechangelist')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasechangelist file: ${err.localizedMessage}"
                        CHANGELOG = ''
                    }

                    try
                    {
                        RELEASENAME = readFile(file: 'pipeline/releasename')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasename file: ${err.localizedMessage}"
                        RELEASENAME = ''
                    }

                    sh("github-release delete --user OpenSageTV --repo \"sagetv-miniclient\" --tag v${version} -s ${GIT_HUB_TOKEN} || exit 0")
                    sh("github-release release -s ${GIT_HUB_TOKEN} --user OpenSageTV --repo \"sagetv-miniclient\" --tag \"v${version}\" --name \"${RELEASENAME}\" --description \"${CHANGELOG}\"")
                    sh("sleep 5s")
                    //Add apk to the release
                    sh("github-release upload -s ${GIT_HUB_TOKEN} --user OpenSageTV --repo \"sagetv-miniclient\" --tag \"v${version}\" --name \"SageTVAndroidClient_${version}.apk\" --file \"android-tv/build/outputs/apk/${VARIANT}/android-tv-release.apk\"")
                }
            }
        }
		*/

    }
}
